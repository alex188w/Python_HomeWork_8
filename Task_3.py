"""
Задание 3.
Реализовать программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс Клетка (Cell).
В его конструкторе инициализировать параметр (quantity),
соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (add()),
вычитание (sub()),
умножение (mul()),
деление (truediv()).
Данные методы должны применяться только к клеткам и выполнять увеличение,
уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
Сложение. Объединение двух клеток.
При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки.
Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух.
Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
Деление. Создается общая клетка из двух.
Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
** - По желанию: В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****...,
где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.
Подсказка: подробный список операторов для перегрузки доступен по ссылке.
"""


class Cell():
    __cells: int
    
    # конструктор
    def __init__(self, cells: int):
        self.__cells = cells
    
    # сложение
    def __add__(self, other):
        if isinstance(other, Cell):
            return self.__cells + other.__cells
    
    # вычитание с проверкой
    def __sub__(self, other):
        if isinstance(other, Cell):
            if (self.__cells - other.__cells) > 0:
                return self.__cells - other.__cells
            else:
                return print("вычитание невозможно")
                    
    # умножение
    def __mul__(self, other):
        if isinstance(other, Cell):
            return self.__cells * other.__cells
    
    # целочисленное деление
    def __truediv__(self, other):
        if isinstance(other, Cell):
            return self.__cells // other.__cells
    
    # для распечатки
    def __str__(self):
        return str(self.__cells)
    
    # метод упорядочивания по рядам
    def make_order(self, n: int):
        strings_count: int
        last_string: int
        strings_count = self.__cells // n
        last_string = self.__cells % n
        for i in range(strings_count):
            if i > 0:
                print()
            for j in range(n):
                print("*", end='')
        print()

        if last_string > 0:
            for i in range(last_string):
                print("*", end='')
            print()

print("Создаем объекты клеток")
cell1 = Cell(15)
cell2 = Cell(12)
cell3 = Cell(17)
cell4 = Cell(30)
print(f"Клетка cell1 имеет {cell1} ячеек")
print(f"Клетка cell2 имеет {cell2} ячеек")
print(f"Клетка cell3 имеет {cell3} ячеек")
print(f"Клетка cell4 имеет {cell4} ячеек")


print(f"Сложение клеток cell1 + cell2 = {cell1 + cell2} ячеек")
print(f"Вычитание клеток cell1 - cell2 = {cell1 - cell2} ячеек")
print(f"Вычитание клеток cell1 - cell3 = ", end= ' ')
cell5 = cell1-cell3

print(f"Умножение клеток cell1 * cell2 = {cell1 * cell2}")
print(f"Деление клеток cell1 / cell2 = {cell1 / cell2}")
print(f"Кол-во клеток в cell4 = {cell4}, упорядочивание по 7:")
cell4.make_order(7)

print(f"Кол-во клеток в cell4 = {cell4}, упорядочивание по 10:")
cell4.make_order(10)
